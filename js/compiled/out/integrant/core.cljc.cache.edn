{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{ref run! read-string}, :name integrant.core, :imports nil, :requires {set clojure.set, clojure.spec.alpha cljs.spec.alpha, walk clojure.walk, clojure.set clojure.set, dep com.stuartsierra.dependency, s cljs.spec.alpha, str clojure.string, clojure.string clojure.string, cljs.spec.alpha cljs.spec.alpha, clojure.walk clojure.walk, com.stuartsierra.dependency com.stuartsierra.dependency}, :cljs.spec/speced-vars [], :uses nil, :defs {missing-refs {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 154, :column 8, :end-line 154, :end-column 20, :private true, :arglists (quote ([config]))}, :private true, :name integrant.core/missing-refs, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 20, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}, build-key {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 217, :column 8, :end-line 217, :end-column 17, :private true, :arglists (quote ([f assertf system [k v]]))}, :private true, :name integrant.core/build-key, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 17, :method-params ([f assertf system p__32881]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 4, :fn-var true, :arglists (quote ([f assertf system [k v]]))}, resume {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 335, :column 7, :end-line 335, :end-column 13, :arglists (quote ([config system] [config system keys])), :doc "Turn a config map into a system map, reusing resources from an existing\n  system when it's possible to do so. Keys are traversed in dependency order,\n  resumed with the resume-key multimethod, then the refs associated with the\n  key are expanded.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([config system] [config system keys]), :arglists ([config system] [config system keys]), :arglists-meta (nil nil)}}, :name integrant.core/resume, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([config system] [config system keys]), :arglists ([config system] [config system keys]), :arglists-meta (nil nil)}, :method-params ([config system] [config system keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 3, :fn-var true, :arglists ([config system] [config system keys]), :doc "Turn a config map into a system map, reusing resources from an existing\n  system when it's possible to do so. Keys are traversed in dependency order,\n  resumed with the resume-key multimethod, then the refs associated with the\n  key are expanded."}, spec-exception {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 294, :column 8, :end-line 294, :end-column 22, :private true, :arglists (quote ([system k v spec ed]))}, :private true, :name integrant.core/spec-exception, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 22, :method-params ([system k v spec ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 5, :fn-var true, :arglists (quote ([system k v spec ed]))}, ->Ref {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 10, :column 12, :end-line 10, :end-column 15, :internal-ctor true, :factory :positional, :arglists (quote ([key]))}, :name integrant.core/->Ref, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 15, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key]))}, expand {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 244, :column 7, :end-line 244, :end-column 13, :arglists (quote ([config])), :doc "Replace all refs with the values they correspond to."}, :name integrant.core/expand, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 13, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :doc "Replace all refs with the values they correspond to."}, missing-refs-exception {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 145, :column 8, :end-line 145, :end-column 30, :private true, :arglists (quote ([config refs]))}, :private true, :name integrant.core/missing-refs-exception, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 30, :method-params ([config refs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config refs]))}, halt! {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 319, :column 7, :end-line 319, :end-column 12, :arglists (quote ([system] [system keys])), :doc "Halt a system map by applying halt-key! in reverse dependency order.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([system] [system keys]), :arglists ([system] [system keys]), :arglists-meta (nil nil)}}, :name integrant.core/halt!, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([system] [system keys]), :arglists ([system] [system keys]), :arglists-meta (nil nil)}, :method-params ([system] [system keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists ([system] [system keys]), :doc "Halt a system map by applying halt-key! in reverse dependency order."}, try-run-action {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 174, :column 8, :end-line 174, :end-column 22, :private true, :arglists (quote ([system completed remaining f k]))}, :private true, :name integrant.core/try-run-action, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 22, :method-params ([system completed remaining f k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 5, :fn-var true, :arglists (quote ([system completed remaining f k]))}, ambiguous-refs {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 151, :column 8, :end-line 151, :end-column 22, :private true, :arglists (quote ([config]))}, :private true, :name integrant.core/ambiguous-refs, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 22, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}, normalize-key {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 42, :column 8, :end-line 42, :end-column 21, :private true, :arglists (quote ([k]))}, :private true, :name integrant.core/normalize-key, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 21, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, reverse-dependent-keys {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 100, :column 8, :end-line 100, :end-column 30, :private true, :arglists (quote ([config keys]))}, :private true, :name integrant.core/reverse-dependent-keys, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 30, :method-params ([config keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config keys]))}, resolve-ref {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 157, :column 8, :end-line 157, :end-column 19, :private true, :arglists (quote ([config ref]))}, :private true, :name integrant.core/resolve-ref, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 19, :method-params ([config ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config ref]))}, build-exception {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 203, :column 8, :end-line 203, :end-column 23, :private true, :arglists (quote ([system f k v t]))}, :private true, :name integrant.core/build-exception, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 23, :method-params ([system f k v t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 5, :fn-var true, :arglists (quote ([system f k v t]))}, find-derived-1 {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 69, :column 7, :end-line 69, :end-column 21, :arglists (quote ([m k])), :doc "Return the map entry in a map, m, where the key is derived from the keyword,\n  k. If there are no matching keys, nil is returned. If there is more than one\n  matching key, an ambiguous key exception is raised."}, :name integrant.core/find-derived-1, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 21, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Return the map entry in a map, m, where the key is derived from the keyword,\n  k. If there are no matching keys, nil is returned. If there is more than one\n  matching key, an ambiguous key exception is raised."}, suspend! {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 350, :column 7, :end-line 350, :end-column 15, :arglists (quote ([system] [system keys])), :doc "Suspend a system map by applying suspend-key! in reverse dependency order.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([system] [system keys]), :arglists ([system] [system keys]), :arglists-meta (nil nil)}}, :name integrant.core/suspend!, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([system] [system keys]), :arglists ([system] [system keys]), :arglists-meta (nil nil)}, :method-params ([system] [system keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists ([system] [system keys]), :doc "Suspend a system map by applying suspend-key! in reverse dependency order."}, derived-from? {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 53, :column 7, :end-line 53, :end-column 20, :arglists (quote ([key candidate])), :doc "Return true if a key is derived from candidate keyword or vector of\n  keywords."}, :name integrant.core/derived-from?, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 20, :method-params ([key candidate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key candidate])), :doc "Return true if a key is derived from candidate keyword or vector of\n  keywords."}, run-exception {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 163, :column 8, :end-line 163, :end-column 21, :private true, :arglists (quote ([system completed remaining f k v t]))}, :private true, :name integrant.core/run-exception, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 21, :method-params ([system completed remaining f k v t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 7, :fn-var true, :arglists (quote ([system completed remaining f k v t]))}, init {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 309, :column 7, :end-line 309, :end-column 11, :arglists (quote ([config] [config keys])), :doc "Turn a config map into an system map. Keys are traversed in dependency\n  order, initiated via the init-key multimethod, then the refs associated with\n  the key are expanded.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([config] [config keys]), :arglists ([config] [config keys]), :arglists-meta (nil nil)}}, :name integrant.core/init, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([config] [config keys]), :arglists ([config] [config keys]), :arglists-meta (nil nil)}, :method-params ([config] [config keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 2, :fn-var true, :arglists ([config] [config keys]), :doc "Turn a config map into an system map. Keys are traversed in dependency\n  order, initiated via the init-key multimethod, then the refs associated with\n  the key are expanded."}, ref {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([key])), :doc "Create a reference to a top-level key in a config map."}, :name integrant.core/ref, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 10, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key])), :doc "Create a reference to a top-level key in a config map."}, suspend-key! {:meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 276, :column 11, :end-line 276, :end-column 23, :arglists (quote ([key value])), :doc "Suspend a running implementation associated with a key, so that it may be\n  eventually passed to resume-key. By default this multimethod calls halt-key!,\n  but it may be customized to do things like keep a server running, but buffer\n  incoming requests until the server is resumed."}, :name integrant.core/suspend-key!, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 23, :column 1, :line 276, :end-line 276, :tag cljs.core/MultiFn, :arglists (quote ([key value])), :doc "Suspend a running implementation associated with a key, so that it may be\n  eventually passed to resume-key. By default this multimethod calls halt-key!,\n  but it may be customized to do things like keep a server running, but buffer\n  incoming requests until the server is resumed."}, try-build-action {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 212, :column 8, :end-line 212, :end-column 24, :private true, :arglists (quote ([system f k v]))}, :private true, :name integrant.core/try-build-action, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 24, :method-params ([system f k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 4, :fn-var true, :arglists (quote ([system f k v]))}, expand-key {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 160, :column 8, :end-line 160, :end-column 18, :private true, :arglists (quote ([config value]))}, :private true, :name integrant.core/expand-key, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 18, :method-params ([config value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config value]))}, map->Ref {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 10, :column 12, :end-line 10, :end-column 15, :internal-ctor true, :factory :map, :arglists (quote ([G__32830]))}, :name integrant.core/map->Ref, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 15, :method-params ([G__32830]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__32830]))}, pre-init-spec {:name integrant.core/pre-init-spec, :file "resources/public/js/compiled/out/integrant/core.cljc", :line 287, :column 1, :end-line 287, :end-column 24, :doc "Return a spec for the supplied key that is used to check the associated\n  value before the key is initiated.", :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 287, :column 11, :end-line 287, :end-column 24, :doc "Return a spec for the supplied key that is used to check the associated\n  value before the key is initiated."}, :tag cljs.core/MultiFn}, run! {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 187, :column 7, :end-line 187, :end-column 11, :arglists (quote ([system keys f])), :doc "Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in dependency order. The function should take two\n  arguments, a key and value."}, :name integrant.core/run!, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 11, :method-params ([system keys f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system keys f])), :doc "Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in dependency order. The function should take two\n  arguments, a key and value."}, find-derived {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 62, :column 7, :end-line 62, :end-column 19, :arglists (quote ([m k])), :doc "Return a seq of all entries in a map, m, where the key is derived from the\n  a candidate key, k. If there are no matching keys, nil is returned. The\n  candidate key may be a keyword, or vector of keywords."}, :name integrant.core/find-derived, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 19, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Return a seq of all entries in a map, m, where the key is derived from the\n  a candidate key, k. If there are no matching keys, nil is returned. The\n  candidate key may be a keyword, or vector of keywords."}, reverse-run! {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 195, :column 7, :end-line 195, :end-column 19, :arglists (quote ([system keys f])), :doc "Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in reverse dependency order. The function should take two\n  arguments, a key and value."}, :name integrant.core/reverse-run!, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 19, :method-params ([system keys f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system keys f])), :doc "Apply a side-effectful function f to each key value pair in a system map.\n  Keys are traversed in reverse dependency order. The function should take two\n  arguments, a key and value."}, missing-keys {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 327, :column 8, :end-line 327, :end-column 20, :private true, :arglists (quote ([system ks]))}, :private true, :name integrant.core/missing-keys, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 20, :method-params ([system ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 2, :fn-var true, :arglists (quote ([system ks]))}, dependency-graph {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 82, :column 7, :end-line 82, :end-column 23, :arglists (quote ([config])), :doc "Return a dependency graph of all the refs in a config. Resolve derived\n  dependencies."}, :name integrant.core/dependency-graph, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 23, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config])), :doc "Return a dependency graph of all the refs in a config. Resolve derived\n  dependencies."}, ambiguous-key-exception {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 45, :column 8, :end-line 45, :end-column 31, :private true, :arglists (quote ([config key matching-keys]))}, :private true, :name integrant.core/ambiguous-key-exception, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 31, :method-params ([config key matching-keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([config key matching-keys]))}, dependent-keys {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 97, :column 8, :end-line 97, :end-column 22, :private true, :arglists (quote ([config keys]))}, :private true, :name integrant.core/dependent-keys, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 22, :method-params ([config keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config keys]))}, resume-key {:meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 265, :column 11, :end-line 265, :end-column 21, :arglists (quote ([key value old-value old-impl])), :doc "Turn a config value associated with a key into a concrete implementation,\n  but reuse resources (e.g. connections, running threads, etc) from an existing\n  implementation. By default this multimethod calls init-key and ignores the\n  additional argument."}, :name integrant.core/resume-key, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 21, :column 1, :line 265, :end-line 265, :tag cljs.core/MultiFn, :arglists (quote ([key value old-value old-impl])), :doc "Turn a config value associated with a key into a concrete implementation,\n  but reuse resources (e.g. connections, running threads, etc) from an existing\n  implementation. By default this multimethod calls init-key and ignores the\n  additional argument."}, Ref {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name integrant.core/Ref, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 15, :type true, :column 12, :internal-ctor true, :line 10, :record true, :end-line 10, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, init-key {:meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 249, :column 11, :end-line 249, :end-column 19, :arglists (quote ([key value])), :doc "Turn a config value associated with a key into a concrete implementation.\n  For example, a database URL might be turned into a database connection."}, :name integrant.core/init-key, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 19, :column 1, :line 249, :end-line 249, :tag cljs.core/MultiFn, :arglists (quote ([key value])), :doc "Turn a config value associated with a key into a concrete implementation.\n  For example, a database URL might be turned into a database connection."}, halt-missing-keys! {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 330, :column 8, :end-line 330, :end-column 26, :private true, :arglists (quote ([system keys]))}, :private true, :name integrant.core/halt-missing-keys!, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 26, :method-params ([system keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 2, :fn-var true, :arglists (quote ([system keys]))}, halt-key! {:meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 255, :column 11, :end-line 255, :end-column 20, :arglists (quote ([key value])), :doc "Halt a running or suspended implementation associated with a key. This is\n  often used for stopping processes or cleaning up resources. For example, a\n  database connection might be closed. This multimethod must be idempotent.\n  The return value of this multimethod is discarded."}, :name integrant.core/halt-key!, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 20, :column 1, :line 255, :end-line 255, :tag cljs.core/MultiFn, :arglists (quote ([key value])), :doc "Halt a running or suspended implementation associated with a key. This is\n  often used for stopping processes or cleaning up resources. For example, a\n  database connection might be closed. This multimethod must be idempotent.\n  The return value of this multimethod is discarded."}, build {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 224, :column 7, :end-line 224, :end-column 12, :arglists (quote ([config keys f] [config keys f assertf])), :doc "Apply a function f to each key value pair in a configuration map. Keys are\n  traversed in dependency order, and any references in the value expanded. The\n  function should take two arguments, a key and value, and return a new value.\n  An optional fourth argument, assertf, may be supplied to provide an assertion\n  check on the system, key and expanded value.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([config keys f] [config keys f assertf]), :arglists ([config keys f] [config keys f assertf]), :arglists-meta (nil nil)}}, :name integrant.core/build, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([config keys f] [config keys f assertf]), :arglists ([config keys f] [config keys f assertf]), :arglists-meta (nil nil)}, :method-params ([config keys f] [config keys f assertf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 4, :fn-var true, :arglists ([config keys f] [config keys f assertf]), :doc "Apply a function f to each key value pair in a configuration map. Keys are\n  traversed in dependency order, and any references in the value expanded. The\n  function should take two arguments, a key and value, and return a new value.\n  An optional fourth argument, assertf, may be supplied to provide an assertion\n  check on the system, key and expanded value."}, find-keys {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 90, :column 8, :end-line 90, :end-column 17, :private true, :arglists (quote ([config keys f]))}, :private true, :name integrant.core/find-keys, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 17, :method-params ([config keys f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 3, :fn-var true, :arglists (quote ([config keys f]))}, find-refs {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 24, :column 8, :end-line 24, :end-column 17, :private true, :arglists (quote ([v]))}, :private true, :name integrant.core/find-refs, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, assert-pre-init-spec {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 304, :column 8, :end-line 304, :end-column 28, :private true, :arglists (quote ([system key value]))}, :private true, :name integrant.core/assert-pre-init-spec, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 28, :method-params ([system key value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system key value]))}, composite-keyword {:meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 33, :column 3, :end-line 33, :end-column 20, :doc "Return a unique keyword that is derived from an ordered collection of\n  keywords. The function will return the same keyword for the same collection.", :arglists (quote ([kws]))}, :name integrant.core/composite-keyword, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 20, :column 1, :line 29, :end-line 33, :tag any, :arglists (quote ([kws])), :doc "Return a unique keyword that is derived from an ordered collection of\n  keywords. The function will return the same keyword for the same collection."}, find-derived-refs {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 79, :column 8, :end-line 79, :end-column 25, :private true, :arglists (quote ([config v]))}, :private true, :name integrant.core/find-derived-refs, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 25, :method-params ([config v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([config v]))}, run-loop {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 180, :column 8, :end-line 180, :end-column 16, :private true, :arglists (quote ([system keys f]))}, :private true, :name integrant.core/run-loop, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 16, :method-params ([system keys f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 3, :fn-var true, :arglists (quote ([system keys f]))}, ref? {:protocol-inline nil, :meta {:file "/Users/masakiando/projects2018/AR-sample/resources/public/js/compiled/out/integrant/core.cljc", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([x])), :doc "Return true if its argument is a ref."}, :name integrant.core/ref?, :variadic false, :file "resources/public/js/compiled/out/integrant/core.cljc", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if its argument is a ref."}}, :cljs.spec/registry-ref [], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:explain :remaining-keys :integrant.core/missing-refs :system :key :config :default :integrant.core/build-threw-exception :value key :completed-keys :function :matching-keys :spec :reason :integrant.core/origin :integrant.core/run-threw-exception :missing-refs :integrant.core/build :hierarchy :integrant.core/build-failed-spec :integrant.core/ambiguous-key}, :order [:key key :reason :config :matching-keys :integrant.core/ambiguous-key :missing-refs :integrant.core/missing-refs :system :completed-keys :remaining-keys :function :value :integrant.core/run-threw-exception :integrant.core/origin :integrant.core/build-threw-exception :integrant.core/build :hierarchy :default :spec :explain :integrant.core/build-failed-spec]}, :doc nil}